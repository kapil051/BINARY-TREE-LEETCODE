Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
Example 2:


Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 1000

***********************************************************************CODE*****************************************************************************************

class Solution {
public:
  
    //NON FULL NODE MUST BE THE LAST NODE 
    
    bool isCompleteTree(TreeNode* root) {
        
            if(!root) return true;
        
        if(!root->left&&!root->right) return true;
      
             bool flag=false;
        
        //KEEPING TRACK OF NON FULL NODE
        
        queue<TreeNode*> pendingNodes;
        
          pendingNodes.push(root);
        
        
        while(pendingNodes.size()){
            
            TreeNode *front=pendingNodes.front();
              
                 pendingNodes.pop();
            
            if(front->left){
                
              //IF NON FULL NODE IS ALREADY PRESENT IN QUEUE
              //NOW IF NODE COMES IT WILL RETURN FALSE
                if(flag==true) return false;
                
                pendingNodes.push(front->left);
            }
            
            //IF NODE IS NOT A FULL NODE THEN MARK FLAG AS TRUE
            //NON FULL NODE MUST BE THE LAST NODE 
            
            else{
                flag=true;
            }
              
            
            if(front->right){
                
                if(flag==true) return false;
                
                pendingNodes.push(front->right);
                
            }
            
            else{
                flag=true;
            }
         
             
            
            
        }
        
        //RETURN TRUE AT THE LAST
        
       return true;
    }
};
